apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "uk.co.ecorunners.ecorunners"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 3
        versionName "1.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [onesignal_app_id: "4b78e5b2-4259-476d-9d30-af4419c6556f",
                                //Project number pulled from dashboard, local value is ignored.
                                onesignal_google_project_number: "REMOTE"]
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            testCoverageEnabled = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'

    })

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.0-beta1'
    implementation 'com.google.firebase:firebase-database:12.0.1'
    implementation 'com.google.firebase:firebase-crash:12.0.1'
    implementation 'com.google.firebase:firebase-auth:12.0.1'
    implementation 'com.firebase:firebase-client-android:2.5.2'
    implementation 'com.google.firebase:firebase-core:12.0.1'
    implementation 'com.google.android.gms:play-services-auth:12.0.1'

    implementation 'com.onesignal:OneSignal:[3.6.2, 3.99.99]'
    implementation 'com.android.support:support-v4:27.1.1'

    androidTestImplementation('com.schibsted.spain:barista:2.7.0') {
        exclude group: 'com.android.support'
    }
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation "org.robolectric:multidex:3.4.2"
    testImplementation 'org.mockito:mockito-core:1.10.19'

    testImplementation 'org.powermock:powermock:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'


}
apply plugin: 'com.google.gms.google-services'

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-26/android.jar," +

                "${project.buildDir}/intermediates/classes-jar/debug/classes.jar"
        property "sonar.projectName", "Ecorunners"
        property "sonar.projectKey", "uk.co.ecorunners.ecorunners"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.language", "java"
        property "sonar.sources", "src/main/java"
        property "sonar.login", "admin"
        property "sonar.password", "admin"
        property "sonar.profile", "Sonar way"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.test", "./src/android/java, ./src/test/java"
        property "sonar.dynamicAnalysis", "reuseReports"

        property "sonar.junit.reportsPath", "build/reports/coverage/debug"
        property "sonar.coverage.exclusions","**/src/main/java/uk/co/ecorunners/ecorunners/utils/Constants*"

        property "sonar.jacoco.reportPath", fileTree(dir: project.projectDir, includes: ['**/*.exec'])
        property "sonar.java.test.binaries", "${project.buildDir}/intermediates/classes-jar/debug"
        property "sonar.jacoco.itReportPath", fileTree(dir: project.projectDir, includes: ['**/*.ec'])
        property "sonar.java.test.libraries", libraries
        property "sonar.android.lint.report", "./build/outputs/lint-results.xml"
        property "sonar.libraries", libraries
        property "sonar.java.libraries", libraries
        property "sonar.import_unknown_files", true
        property "sonar.scm.disabled", true
    }
}
apply plugin: 'jacoco'
jacoco {
    toolVersion "0.7.6.201602180812"
}
// run ./gradlew clean createDebugCoverageReport jacocoTestReport
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      'android/**/*.*',
                      '**/Lambda$*.class', //Retrolambda
                      '**/Lambda.class',
                      '**/*Lambda.class',
                      '**/*Lambda*.class',
                      '**/*Lambda*.*',
                      '**/*Builder.*',
                      '**/*_MembersInjector.class', //Dagger2 generated code
                      '**/*_MembersInjector*.*', //Dagger2 generated code
                      '**/*_*Factory*.*', //Dagger2 generated code
                      '**/*Component*.*', //Dagger2 generated code
                      '**/*Module*.*' //Dagger2 generated code
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec’ , ‘**/*.ec'])
}
